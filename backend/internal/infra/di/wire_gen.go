// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/floyoops/flo-go/backend/config"
	"github.com/floyoops/flo-go/backend/internal"
	"github.com/floyoops/flo-go/backend/internal/infra/http"
	"github.com/floyoops/flo-go/backend/internal/ui/http/contact"
	"github.com/floyoops/flo-go/backend/internal/ui/http/home"
	"github.com/floyoops/flo-go/backend/pkg/contact/command/send_a_new_message"
	"github.com/floyoops/flo-go/backend/pkg/contact/domain/mailer"
	"github.com/floyoops/flo-go/backend/pkg/contact/domain/model"
	"github.com/floyoops/flo-go/backend/pkg/contact/infra"
	"github.com/floyoops/flo-go/backend/pkg/contact/repository"
	"github.com/floyoops/flo-go/backend/pkg/database"
	"github.com/google/wire"
)

// Injectors from wire.go:

func BuildApp() (*internal.App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	homeController := home.NewHomeController()
	database := provideDatabase(configConfig)
	contactMysqlRepository := infra.NewContactMysqlRepository(database)
	mailer := provideMailer(configConfig)
	email := provideContactFromEmail(configConfig)
	handler := send_a_new_message.NewHandler(contactMysqlRepository, mailer, email)
	contactController := contact.NewContactController(handler)
	echoFactory := provideEchoFactory(configConfig, homeController, contactController)
	app, err := internal.NewApp(echoFactory)
	if err != nil {
		return nil, err
	}
	return app, nil
}

// wire.go:

func provideEchoFactory(config2 *config.Config,
	homeCtrl home.HomeController,
	contactCtrl contact.ContactController) *http.ServerFactory {
	return http.NewServerFactory(config2.RootPath, config2.HttpAllowOrigins, homeCtrl, contactCtrl)
}

func provideDatabase(config2 *config.Config) *database.Database {
	return database.NewDatabase(config2.GetDatabaseDns())
}

func provideMailer(config2 *config.Config) mailer.Mailer {
	return infra.NewMailer(config2.SmtpHost, config2.SmtpPort, config2.SmtpUsername, config2.SmtpPassword)
}

func provideContactFromEmail(config2 *config.Config) *model.Email {
	return config2.ContactEmailApp
}

var (
	databaseWiring = wire.NewSet(infra.NewContactMysqlRepository, wire.Bind(new(repository.ContactRepository), new(*infra.ContactMysqlRepository)))
)
