// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/floyoops/flo-go/backend/config"
	"github.com/floyoops/flo-go/backend/internal"
	"github.com/floyoops/flo-go/backend/internal/infra/http"
	"github.com/floyoops/flo-go/backend/internal/ui/http/contact"
	"github.com/floyoops/flo-go/backend/internal/ui/http/home"
	"github.com/floyoops/flo-go/backend/pkg/bus"
	"github.com/floyoops/flo-go/backend/pkg/bus/middleware"
	"github.com/floyoops/flo-go/backend/pkg/contact/command/send_a_new_message"
	"github.com/floyoops/flo-go/backend/pkg/contact/domain/event/a_new_message_has_been_send"
	"github.com/floyoops/flo-go/backend/pkg/contact/domain/mailer"
	"github.com/floyoops/flo-go/backend/pkg/contact/domain/model"
	"github.com/floyoops/flo-go/backend/pkg/contact/infra"
	"github.com/floyoops/flo-go/backend/pkg/contact/repository"
	"github.com/floyoops/flo-go/backend/pkg/database"
	"github.com/floyoops/flo-go/backend/pkg/logger"
	"github.com/google/wire"
)

// Injectors from wire.go:

func BuildApp() (*internal.App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	homeController := home.NewHomeController()
	database := provideDatabase(configConfig)
	contactMysqlRepository := infra.NewContactMysqlRepository(database)
	sendANewMessageCommandHandler := send_a_new_message.NewHandler(contactMysqlRepository)
	mailer := provideMailer(configConfig)
	email := provideContactFromEmail(configConfig)
	aNewMessageHasBeenSendEventHandler := a_new_message_has_been_send.NewHandler(mailer, email)
	commandBus := provideCommandBus(sendANewMessageCommandHandler, aNewMessageHasBeenSendEventHandler)
	contactController := contact.NewContactController(commandBus)
	v := http.NewRoutes(homeController, contactController)
	serverFactory := provideServerFactory(configConfig, v)
	zapLogger := logger.NewZapLogger()
	app := provideApp(serverFactory, zapLogger, configConfig)
	return app, nil
}

// wire.go:

func provideServerFactory(config2 *config.Config,
	routes []http.Route,
) *http.ServerFactory {
	return http.NewServerFactory(config2.RootPath, config2.HttpAllowOrigins, routes)
}

func provideDatabase(config2 *config.Config) *database.Database {
	return database.NewDatabase(config2.GetDatabaseDns())
}

func provideMailer(config2 *config.Config) mailer.Mailer {
	return infra.NewMailer(config2.SmtpHost, config2.SmtpPort, config2.SmtpUsername, config2.SmtpPassword)
}

func provideContactFromEmail(config2 *config.Config) *model.Email {
	return config2.ContactEmailApp
}

func provideApp(serverFactory *http.ServerFactory, logger2 logger.Logger, config2 *config.Config) *internal.App {
	app, err := internal.NewApp(serverFactory, logger2, config2.ServerPortHttp)
	if err != nil {
		panic(err)
	}
	return app
}

func provideCommandBus(
	SendANewMessageCommandHandler *send_a_new_message.SendANewMessageCommandHandler,
	ANewMessageHasBeenSendEventHandler *a_new_message_has_been_send.ANewMessageHasBeenSendEventHandler,
) *bus.CommandBus {
	eventBus := bus.NewEventBus()
	eventBus.RegisterHandler(&a_new_message_has_been_send.ANewMessageHasBeenSendEvent{}, ANewMessageHasBeenSendEventHandler)

	commandBus := bus.NewCommandBus(eventBus)
	commandBus.Use(middleware.LoggingMiddleware(logger.NewZapLogger()))
	commandBus.RegisterHandler(&send_a_new_message.SendANewMessageCommand{}, SendANewMessageCommandHandler)
	return commandBus
}

var (
	databaseWiring = wire.NewSet(infra.NewContactMysqlRepository, wire.Bind(new(repository.ContactRepository), new(*infra.ContactMysqlRepository)))
	loggerWiring   = wire.NewSet(logger.NewZapLogger, wire.Bind(new(logger.Logger), new(*logger.ZapLogger)))
)
